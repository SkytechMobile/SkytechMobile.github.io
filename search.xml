<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用fastlane实现iOS自动化打包上传fir.im和testflight]]></title>
    <url>%2F2019%2F10%2F11%2F%E4%BD%BF%E7%94%A8fastlane%E5%AE%9E%E7%8E%B0iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0fir-im%E5%92%8Ctestflight%2F</url>
    <content type="text"><![CDATA[前言日复一日重复打包工作，是在浪费宝贵的时间 自动化打包工具应运而生，是我们解放双手的利器 fastlane官方文档 github地址 安装fastlane安装最新的Xcode命令行工具 可以Developer Apple上手动下载对应的Command Line Tools 安装 fastlane官方推荐的xcode-select --install 安装时最后结果是*不能安装该软件*** 安装 fastlane放到/usr/local/bin下面 sudo gem install -n /usr/local/bin fastlane 其他的安装方法：（扩展，可跳过） 第一种是通过 Homebrew 软件包管理器来进行安装，第二种就是我们最熟悉的方式，下载安装包来进行安装,第三种是通过 RubyGems 来进行，RubyGems 是一个方便的 Ruby 程序包管理器，可以将一个 Ruby 应用程序打包到一个 Gem 里，作为一个安装单元。 一个 Gem 就是一个封装起来的应用程序或代码库 配置环境变量添加用户环境变量 vim ~/.bash_profile 添加 123...export PATH=/usr/local/bin:$PATH... 保存退出，使用 source ~/.bash_profile 来使配置立即生效 现在在项目根目录下可以使用fastlane了 fastlane使用在项目根目录下初始化fastlane init 四个选项 123456What would you like to use fastlane for?1.Automate screenshots2.Automate beta distribution to TestFlight3.Automate App Store distribution4.Manual setup - manually setup your project to automate your tasks 解释： 12341 自动截屏。（帮助我们截取App的显示到appstore上的 截图）2 自动发布beta到TestFlight上，用于内测。3 自动打包发布到AppStore上。4 手动设置。 上传fir选择的4 初始化成功会生成如下目录 配置相关文件配置Gemfile如果使用cocoapods要加上（注意带上当前安装的pod的版本号，否则会报错） gem &#39;cocoapods&#39;, &#39;~&gt;1.8.3&#39; 执行 bundle install 第一次运行 bundle install 时自动生成 Gemfile.lock 文件。以后每次运行 bundle install 时,如果 Gemfile 中的条目不变 bundle 就不会再次计算 gem 依赖版本号，直接根据 Gemfile.lock 检查和安装 gem。如果出现依赖冲突时可以通过 bundle update 更新 Gemfile.lock 配置Fastfile12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364default_platform(:ios)platform :ios do before_all do # 如果你用 pod install cocoapods end desc "打包上传ipa到fir.im" lane :fir do # 如果你没有申请adhoc证书，sigh会自动帮你申请，并且添加到Xcode里 # sigh(adhoc: true) # 以下两个action来自fastlane-plugin-versioning， # 第一个递增 Build，第二个设定Version。 # 如果你有多个target，就必须指定target的值，否则它会直接找找到的第一个plist修改 # 在这里我建议每一个打的包的Build都要不一样，这样crash了拿到日志，可以对应到ipa上 increment_build_number_in_plist( target: 'TestDemo', build_number: '5' ) increment_version_number_in_plist( target: 'TestDemo', version_number: '1.0' ) # gym用来编译ipa gym( scheme: 'TestDemo', export_method: "ad-hoc", # 指定打包方式 ["app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"] #teamID: "xxxxxx", # developer.apple.com 上查看 xcargs: "-allowProvisioningUpdates", output_directory: './firim', output_name: 'TestDemo.ipa' ) # 上传ipa到fir.im服务器，在fir.im获取firim_api_token firim(firim_api_token: "xxxxxxxxxxxxx") # token 在fir 上查看。 end desc "打包上传testflight/app-store" lane :tf do increment_build_number_in_plist( target: 'TestDemo' ) increment_version_number_in_plist( target: 'TestDemo', version_number: '1.0' ) # gym用来编译ipa gym( scheme: 'TestDemo', export_method: "app-store", # 指定打包方式 #teamID: "xxxxxx", # developer.apple.com 上查看 xcargs: "-allowProvisioningUpdates", output_directory: './testflight', output_name: 'TestDemo.ipa' ) #upload_to_testflight appstore # 上传你的App iTunes Connect endend 关于build_number与version_number 1,version_number、build_number都没有设置，会自动获取项目的version和build版本号，并且都自动加1。例如，fastlane打包前后版本号变化：ver1.0.2（Build 11）-&gt; ver1.0.3（Build 12）；2,version_number设置了、build_number没设置，会自动获取项目build版本号，build版本号+1；3,version_number、build_number都设置了，那打包出来的版本号就是设置的版本号，不会自动+1； 添加两个插件12fastlane add_plugin versioningfastlane add_plugin firim 执行打包上传fir.imfastlane fir fir为Fastfile文件中lane :fir do处设置的名字，可以为别的名字 执行打包成功如下图所示： 根目录下firim文件夹下可看到ipa文件 fir.im应用列表，多了刚上传的项目 上传testFlightfastlane tf 问题 Could not find action, lane or variable ‘increment_build_number_in_plist’… 解决： fastlane add_plugin versioning 参考：https://github.com/SiarheiFedartsou/fastlane-plugin-versioning/issues/20 参考 fastlane 自动打包到 fir.im 的踩坑之路 fastlane ios快读入门文档 fastlane使用说明书 fastlane 在mac上配置iOS自动化上架 iOS 自动打包 - fastlane （一） 和重复劳动说再见-使用fastlane进行iOS打包 [macOS/Linux 环境变量设置](]]></content>
      <categories>
        <category>作者：Fan Chason</category>
      </categories>
      <tags>
        <tag>自动化打包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo和Github搭建技术博客]]></title>
    <url>%2F2019%2F09%2F26%2F%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[准备:nodejs、git、npm、hexo 验证有没有敲命令，eg: npm -v，没有装先去装 npm可通过homebrew安装 brew install npm Hexo安装 npm install hexo-cli -g 开始搭建博客 本地创建一个存放博客文件夹 eg: SkytechMobileBlog 切到SkytechMobileBlog目录下执行初始化 hexo init 然后安装依赖 npm install 生成静态文件 hexo g 创建服务 hexo s hexo常用命令： 命令 含义 hexo init 初始化一个文件夹，它会为这个文件夹配置所有骨架 hexo g 即hexo generate，生成静态文件 hexo s 即hexo server，创建服务 hexo d 即hexo deploy,用于将本地文件发布到github上 hexo n 即hexo new,用于新建一篇文章 现在只是在本地搭建了一个技术博客， 要想把博客内容让所有人都能看到，就得借助Github了，把博客内容部署到Github上去 部署到github GitHub上登录/注册一个账号，创建仓库 如果是团队博客 先New organization，再New repository（名字为xxx.github.io，xxx为organization名称） 如果是个人博客： New repository（名字为xxx.github.io，xxx为github账号） 博客的根目录的_config.yml文件的底部deploy设置为： 1234deploy: type: git repository: https://github.com/SkytechMobile/SkytechMobile.github.io.git branch: master 注意：冒号（:）后都有一个空格。你可以把此段代码复制过去，并把https://github.com/SkytechMobile/SkytechMobile.github.io.git替换为你自己的Github仓库路径 部署 根目录下执行 hexo g hexo d 如果此时报错你可以输入npm install hexo-deployer-git --save来解决 以上都没什么问题的话，访 http://SkytechMobile.github.io/ 就能看到自己的博客了 主题配置Eg: 把主题设置为next，最火的hexo的主题。 下载主题 在跟目录文件夹下输入如下命令下载next主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 设置主题 把SKytechMobileBlog/_config.yml文件称为站点配置 把SKytechMobileBlog/_config.yml文件称为主题配置 下载完成后，将站点配置文件的theme字段的值改为next，重新编译并上传到Github上后，访问博客链接，你就会发现主题已经改成next了 next的默认语言为英文，你可以更改为简体中文，找到并打开站点配置文件，找到language字段，将值改为zh-Hans 这里介绍下站点配置文件部分字段的含义： 12345title: SkytechMobile团队博客 // 博客名称subtitle: // 博客副名称description: // 描述author: 晨之科SDK团队 // 作者language: zh-Hans // 语言 关于写博客一、如何新建博客新建命令 hexo new xxx 执行上面的命令即在source/_posts/目录下新建了名为xxx的md文件和资源文件夹 二、写博客注意点 如何上传带图片的博客？ 团队博客设置作者 可在博客md文件分类字段设置 categories：作者：Fan Chason]]></content>
      <categories>
        <category>作者：Fan Chason</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
